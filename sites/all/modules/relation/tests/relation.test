<?php

/**
 * @file
 * Tests for Relation module.
 */

/**
 * Relation helper class.
 */
class RelationTestCase extends DrupalWebTestCase {
  function setUp() {
    // Other modules will reuse this class, make sure to pass the arguments up.
    if (func_num_args()) {
      parent::setUp(func_get_args());
    }
    else {
      parent::setUp('relation');
    }
    $perms = array(
      'create article content',
      'create page content',
      'administer relation types',
      'create relations',
      'edit relations',
      'delete relations',
      );
    $web_user = $this->drupalCreateUser($perms);
    $this->drupalLogin($web_user);
  }

  /**
   * Creates a set of standard relation types.
   */
  function createRelationTypes() {
    $this->relation_types['symmetric'] = array(
      'predicate'   => 'symm' . $this->randomName(),
      'label' => 'symm' . $this->randomString(),
      'source_bundles' => array('node:article', 'node:page', 'term:*'),
    );
    $this->relation_types['directional'] = array(
      'predicate'   => 'dir' . $this->randomName(),
      'label' => 'dir' . $this->randomString(),
      'directional' => TRUE,
      'source_bundles' => array('node:article'),
      'target_bundles' => array('node:page'),
    );
    $this->relation_types['octopus'] = array(
      'predicate'   => 'octo' . $this->randomName(),
      'label' => 'octo' . $this->randomString(),
      'min_arity' => 3,
      'max_arity' => 5,
      'source_bundles' => array('node:article', 'node:page'),
    );
    foreach ($this->relation_types as $relation_type) {
      relation_type_save($relation_type);
    }
  }

  /**
   * Validates and saves relations, and checks the process.
   */
  function RelationSaveHelper($predicate, $entity_keys) {
    relation_validate($predicate, $entity_keys, $errors);
    if ($errors) {
      foreach ($errors as $error) {
        $this->fail($error);
      }
    }
    else {
      $this->pass('Validation passed');
    }
    $rid = relation_create($predicate, $entity_keys);
    $relation = relation_load($rid);
    $count = count($relation->entity_keys);
    $this->assertEqual($count, count($entity_keys), 'There are two entities: ' . $count);
    $this->assertEqual($relation->arity, count($entity_keys), 'Arity is 2: ' . $relation->arity);
    $this->assertEqual($relation->predicate, $predicate, 'Predicate is correct: ' . $relation->predicate);
    foreach ($entity_keys as $entity_key) {
      $need_ids[$entity_key['entity_id']] = TRUE;
    }
    foreach ($relation->entity_keys as $entity_key) {
      $this->assertEqual($entity_key['entity_type'], 'node', 'The entity type is node: ' . $entity_key['entity_type']);
      $this->assertTrue(isset($need_ids[$entity_key['entity_id']]), 'The entity ID is correct: ' . $need_ids[$entity_key['entity_id']]);
      unset($need_ids[$entity_key['entity_id']]);
    }
    $this->assertFalse($need_ids, 'All ids found');
    return $rid;
  }
}

/**
 * Test relation API.
 */
class RelationAPITestCase extends RelationTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Relation test',
      'description' => 'Test relations.',
      'group' => 'Relation',
    );
  }

  /**
   * Create some nodes, add some relations and check they are related. This
   * test suite also checks all methods available in RelationQuery.
   */
  function testRelationCRDMultiple() {
    $node1 = $this->drupalCreateNode(array('type' => 'article', 'promote' => 1));
    $node2 = $this->drupalCreateNode(array('type' => 'article', 'promote' => 0));
    $node3 = $this->drupalCreateNode(array('type' => 'page', 'promote' => 1));
    $node4 = $this->drupalCreateNode(array('type' => 'page', 'promote' => 0));
    $node5 = $this->drupalCreateNode(array('type' => 'page', 'promote' => 0));

    $this->createRelationTypes();

    $entity_keys = array(
      array('entity_type' => 'node', 'entity_id' => $node1->nid),
      array('entity_type' => 'node', 'entity_id' => $node4->nid),
    );
    $entity_keys_4 = array(
      array('entity_type' => 'node', 'entity_id' => $node1->nid),
      array('entity_type' => 'node', 'entity_id' => $node2->nid),
      array('entity_type' => 'node', 'entity_id' => $node3->nid),
      array('entity_type' => 'node', 'entity_id' => $node4->nid),
    );

    // Create a symmetric relation article 1 -- page 4
    $predicate_symmetric = $this->relation_types['symmetric']['predicate'];
    $rid_symmetric = $this->RelationSaveHelper($predicate_symmetric, $entity_keys);
    sleep(2);
    // Create a correct directional relation: article 1 -> page 3
    $entity_keys[1]['entity_id'] = $node3->nid;
    $entity_keys[1]['r_index'] = 1;
    $predicate_directional = $this->relation_types['directional']['predicate'];
    $rid_directional = $this->RelationSaveHelper($predicate_directional, $entity_keys);
    sleep(2);
    // Create a 4-ary octopus, nodes 1-4.
    $predicate_octopus = $this->relation_types['octopus']['predicate'];
    $rid_octopus = $this->RelationSaveHelper($predicate_octopus, $entity_keys_4);

    // Get relations for node 1, should return 3 relations
    $relations = relation_query('node', $node1->nid)
      ->execute();
    $count = count($relations);
    $this->assertEqual($count, 3, $count . ' relations found for nid=1, should be 3');
    // Check that symmetric relation is correctly related to node 4
    $this->assertEqual($relations[$rid_symmetric]->entity_keys[1]['entity_id'], $node4->nid, 'Correct entity is related: ' . $relations[$rid_symmetric]->entity_keys[1]['entity_id'] . '==' . $node4->nid);

    // Get number of relations for node 4, should return 2 relations.
    $count = relation_query('node', $node4->nid)
      ->count()
      ->execute();
    $this->assertEqual($count, 2, $count . ' relations foundfor nid=4, should be 2');

    // Get number of relations for node 5, should return 0 relations.
    $count = relation_query('node', $node5->nid)
      ->count()
      ->execute();
    $this->assertEqual($count, 0, $count . ' relations found for nid=5, should be 0');

    // Get relations between entities 2 and 5 (none)
    $count = relation_query('node', $node2->nid)
      ->related('node', $node5->nid)
      ->count()
      ->execute();
    $this->assertEqual($count, 0, $count . ' relations found, should be 0');

    // Get directed relations for node 3 using index, should return >=1 relation.
    $relations = relation_query('node', $node3->nid)
      ->index(1)
      ->execute();
    $count = count($relations);
    $this->assertTrue(isset($relations[$rid_directional]), 'Got the correct directional relation for nid=3.');

    // Get relations between entities 2 and 3 (octopus)
    $relations = relation_query('node', $node2->nid)
      ->related('node', $node3->nid)
      ->execute();
    $count = count($relations);
    $this->assertEqual($count, 1, $count . ' relation found, should be 1');
    // Check that we have the correct relations
    $this->assertEqual(isset($relations[$rid_octopus]), 'Got one correct relation.');

    // Get relations for node 1 (symmetric, directional, octopus), limit to
    // octopus with predicate()
    $relations = relation_query('node', $node1->nid)
      ->predicate(array(
        $this->relation_types['directional']['predicate'],
        $this->relation_types['octopus']['predicate'],
        )
      )
      ->execute();
    $count = count($relations);
    $this->assertEqual($count, 2, $count . ' relations found, should be 2');
    // Check that we have the correct relations
    $this->assertTrue(isset($relations[$rid_directional]), 'Got one correct relation.');
    $this->assertTrue(isset($relations[$rid_octopus]), 'Got a second one.');

    // Get last two relations for node 1
    $relations = relation_query('node', $node1->nid)
      ->range(1, 2)
      ->execute();
    $count = count($relations);
    $this->assertEqual($count, 2, $count . ' relations found, should be 2');
    // Check that we have the correct relations
    $this->assertTrue(isset($relations[$rid_directional]), 'Got one correct relation.');
    $this->assertTrue(isset($relations[$rid_octopus]), 'Got a second one.');

    // Get all relations on node 1 and sort them in reverse created order
    $relations = relation_query('node', $node1->nid)
      ->order('created','DESC')
      ->execute();
    $this->assertEqual(array_keys($relations), array(3, 2, 1), 'Got relations 3, 2, 1: ' . implode(', ', array_keys($relations)));

    // Try deleting the content types.
    $this->drupalGet("admin/structure/relation/manage/$predicate_symmetric/delete");
    $num_relations = 1;
    // See relation_type_delete_confirm() in relation.admin.inc
    $this->assertRaw(format_plural($num_relations, 'The %label relation type is used by 1 relation on your site. If you remove this relation type, you will not be able to edit  %label relations and they may not display correctly.', 'The %label relation type is used by @count relations on your site. If you remove %label, you will not be able to edit %label relations and they may not display correctly.', array('%label' => $this->relation_types['symmetric']['label'], '@count' => $num_relations)), 'Correct number of relations found (1) for ' . $this->relation_types['symmetric']['label'] . ' relation type.');
  }
}